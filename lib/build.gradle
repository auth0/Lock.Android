apply plugin: 'com.android.library'

def semver = defineVersion()
version = semver.stringVersion

logger.lifecycle("Using version ${version} for ${name}")

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName semver.stringVersion
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:percent:$rootProject.supportLibraryVersion"
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.google.code.gson:gson:$rootProject.gsonVersion"
    compile "com.squareup:otto:$rootProject.ottoVersion"
    compile "com.auth0.android:auth0:$rootProject.auth0Version"

    testCompile "junit:junit:$rootProject.jUnitVersion"
    testCompile "org.hamcrest:hamcrest-library:$rootProject.hamcrestVersion"
    testCompile "org.robolectric:robolectric:$rootProject.robolectricVersion"
    testCompile "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testCompile "com.squareup.okhttp3:mockwebserver:$rootProject.okHttpMockWebServerVersion"
    testCompile "com.jayway.awaitility:awaitility:$rootProject.awaitilityVersion"
}

def defineVersion() {
    def current = describeGit(false)
    def snapshot = current == null
    if (snapshot) {
        current = describeGit(snapshot, "2.0.0")
    }
    return new Semver(snapshot: snapshot, version: current)
}

def describeGit(boolean snapshot, String defaultValue = null) {
    def arguments = ['describe', '--tags']
    arguments.add(snapshot ? '--abbrev=0' : '--exact-match')
    def stdout = new ByteArrayOutputStream()
    def string = defaultValue
    try {
        def result = project.exec {
            executable = 'git'
            args = arguments
            standardOutput = stdout
        }

        result.assertNormalExitValue()

        if (stdout.toByteArray().length > 0) {
            string = stdout.toString().replace("\n", "")
        }
    } catch(Exception e) {
        logger.debug("Failed git describe command", e)
    } finally {
        stdout.close()
    }
    return string
}

class Semver {
    def version
    def snapshot

    def getStringVersion() {
        return snapshot ? version + "-SNAPSHOT" : version
    }
}

apply from: '../maven.gradle'
apply from: '../bintray.gradle'