apply plugin: 'com.android.library'

def semver = defineVersion()
version = semver.stringVersion

logger.lifecycle("Using version ${version} for ${name}")

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.3'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName semver.stringVersion
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:recyclerview-v7:24.2.1'
    compile 'com.android.support:support-v4:24.2.1'
    compile 'com.android.support:design:24.2.1'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.auth0.android:auth0:1.3.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.robolectric:robolectric:3.1.2'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.1.2'
    testCompile 'com.jayway.awaitility:awaitility:1.7.0'
    testCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'
}

def defineVersion() {
    def current = describeGit(false)
    def snapshot = current == null
    if (snapshot) {
        current = describeGit(snapshot, "2.0.0")
    }
    return new Semver(snapshot: snapshot, version: current)
}

def describeGit(boolean snapshot, String defaultValue = null) {
    def arguments = ['describe', '--tags']
    arguments.add(snapshot ? '--abbrev=0' : '--exact-match')
    def stdout = new ByteArrayOutputStream()
    def string = defaultValue
    try {
        def result = project.exec {
            executable = 'git'
            args = arguments
            standardOutput = stdout
        }

        result.assertNormalExitValue()

        if (stdout.toByteArray().length > 0) {
            string = stdout.toString().replace("\n", "")
        }
    } catch(Exception e) {
        logger.debug("Failed git describe command", e)
    } finally {
        stdout.close()
    }
    return string
}

class Semver {
    def version
    def snapshot

    def getStringVersion() {
        return snapshot ? version + "-SNAPSHOT" : version
    }
}

apply from: '../maven.gradle'
apply from: '../bintray.gradle'